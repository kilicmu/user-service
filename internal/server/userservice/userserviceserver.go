// Code generated by goctl. DO NOT EDIT.
// Source: user-service.proto

package server

import (
	"context"

	"github.com/kilicmu/user-service/internal/logic/userservice"
	"github.com/kilicmu/user-service/internal/svc"
	"github.com/kilicmu/user-service/pb/github.com/kilicmu/user-service"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	user_service.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServiceServer) Login(ctx context.Context, in *user_service.LoginReq) (*user_service.LoginResp, error) {
	l := userservicelogic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServiceServer) RegisterUser(ctx context.Context, in *user_service.UserInfoDTO) (*user_service.ResultResp, error) {
	l := userservicelogic.NewRegisterUserLogic(ctx, s.svcCtx)
	return l.RegisterUser(in)
}

func (s *UserServiceServer) UserInfo(ctx context.Context, in *user_service.UserInfoReq) (*user_service.UserInfoResp, error) {
	l := userservicelogic.NewUserInfoLogic(ctx, s.svcCtx)
	return l.UserInfo(in)
}

func (s *UserServiceServer) IsUserBeingAlive(ctx context.Context, in *user_service.ValidateUserIsAliveReq) (*user_service.ResultResp, error) {
	l := userservicelogic.NewIsUserBeingAliveLogic(ctx, s.svcCtx)
	return l.IsUserBeingAlive(in)
}

func (s *UserServiceServer) IsUserExist(ctx context.Context, in *user_service.UserInfoReq) (*user_service.ResultResp, error) {
	l := userservicelogic.NewIsUserExistLogic(ctx, s.svcCtx)
	return l.IsUserExist(in)
}

func (s *UserServiceServer) ActiveUserCount(ctx context.Context, in *user_service.VoidData) (*user_service.ActiveUserCountResp, error) {
	l := userservicelogic.NewActiveUserCountLogic(ctx, s.svcCtx)
	return l.ActiveUserCount(in)
}

func (s *UserServiceServer) UpdateUserInfo(ctx context.Context, in *user_service.UserInfoDTO) (*user_service.ResultResp, error) {
	l := userservicelogic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}
